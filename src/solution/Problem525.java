package solution;

import java.util.*;

/**
 * description:给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。
 * */

// TODO 未解决
public class Problem525 {
    public static void main(String args[]){
        int[] nums = new int[]{0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,
                1,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,
                0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0,
                0,1,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,
                1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,
                1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,
                1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,
                1,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,
                0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,0,
                1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,
                0,0,0,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,
                1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,0,
                1,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1,
                1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1,
                1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,
                1,0,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,
                1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,
                0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,
                0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,0,1,1,0,
                0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,0,0,1};
//        int[] nums = new int[]{1,0,1,0,1,1,0,1,1,0,0};
        int x = findMaxLength(nums);
        System.out.println(x);
    }

    private static int findMaxLength(int[] nums) {
//        Map<Integer,Integer> counter = new HashMap<>();
//        LinkedList<Integer> memory = new LinkedList<>();
//        counter.put(0,0);
//        counter.put(1,0);
//        int x = nums[0];
//        for (int i = 0; i < nums.length; i++){
//            if (x == nums[i]){
//                counter.put(nums[i],counter.get(nums[i])+1);
//            }else{
//                memory.add(Math.min(counter.get(0),counter.get(1)));
//                if (nums[i] == 0){
//                    counter.put(0,1);
//                }else {
//                    counter.put(1,1);
//                }
//            }
//            x = nums[i];
//        }
//        memory.add(Math.min(counter.get(0),counter.get(1)));
//        memory.sort((m,n)->m-n);
//         return memory.getLast()*2;

//        List<Integer> list = new LinkedList<>();
//        int count = 0,count0 = 0,count1 = 0;
//        for (int i = 0; i < nums.length; i++) {
//            list.removeAll(list);
//            list.add(nums[i]);
//            for (int j = i+1; j < nums.length; j++) {
//                list.add(nums[j]);
//                count0 = (int)list.stream().filter(x -> x == 0).count();
//                count1 = (int)list.stream().filter(x -> x == 1).count();
//                if (count0 == count1 && count0 > count ){
//                    count = (int)count0;
//                }
//            }
//        }
//        return  count*2;

        Map<Integer,Integer> memory = new HashMap<>();
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            memory.put(0,0);
            memory.put(1,0);
            memory.put(nums[i],memory.get(nums[i])+1);
            for (int j = i+1; j < nums.length; j++) {
                memory.put(nums[j],memory.get(nums[j])+1);
//                int count0 = memory.get(0);
//                int count1 = memory.get(1);
                if (memory.get(0).equals(memory.get(1)) && memory.get(0) > count){
                    count = memory.get(0);
                }
            }
        }
        return  count*2;
    }
}
